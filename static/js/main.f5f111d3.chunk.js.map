{"version":3,"sources":["Context-API/SearchContext.js","Components/Search.js","Components/Home.js","Components/ImgDetails.js","App.js","serviceWorker.js","index.js"],"names":["SearchContext","createContext","SearchCntextProvidor","props","useState","search","setSearch","Results","setResults","Provider","value","SearchBtn","e","preventDefault","axios","get","then","res","data","hits","catch","err","console","log","children","Search","useContext","onSubmit","type","placeholder","onChange","target","required","Home","className","map","img","key","id","to","src","webformatURL","ImgDetailes","imgID","match","params","Image_id","Image","setImage","useEffect","largeImageURL","alt","user","href","pageURL","download","App","exact","path","render","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sSAGaA,EAAgBC,0BAqBdC,EApBc,SAACC,GAAU,IAAD,EACNC,mBAAS,IADH,mBAC5BC,EAD4B,KACnBC,EADmB,OAEJF,mBAAS,IAFL,mBAE5BG,EAF4B,KAElBC,EAFkB,KAcnC,OACI,kBAACR,EAAcS,SAAf,CAAwBC,MAAO,CAACJ,YAAYC,UAAUI,UAXxC,SAACC,GACfA,EAAEC,iBACFC,IAAMC,IAAN,uCAHQ,qCAGR,cAAmDV,EAAnD,kCACKW,MAAK,SAAAC,GACFT,EAAWS,EAAIC,KAAKC,SAEvBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,SAKflB,EAAMqB,W,eCNJC,EAZA,WAAO,IAAD,EACcC,qBAAW1B,GAAnCM,EADU,EACVA,UAAWK,EADD,EACCA,UAIlB,OACI,0BAAMgB,SAAUhB,GACZ,2BAAOiB,KAAK,OAAOC,YAAY,oBAAoBC,SAL1C,SAAClB,GACdN,EAAUM,EAAEmB,OAAOrB,QAIwDsB,UAAQ,IAC/E,4CCaGC,G,MAlBF,WAAO,IACT1B,EAAWmB,qBAAW1B,GAAtBO,QACP,OACI,yBAAK2B,UAAU,QACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACV3B,EAAQ4B,KAAI,SAAAC,GAAG,OACZ,yBAAKF,UAAU,MAAMG,IAAKD,EAAIE,IAC1B,kBAAC,IAAD,CAAMC,GAAI,IAAMH,EAAIE,IAChB,yBAAKE,IAAKJ,EAAIK,eACd,yBAAKP,UAAU,qBCS5BQ,G,MArBK,SAACvC,GACjB,IAAIwC,EAAQxC,EAAMyC,MAAMC,OAAOC,SADJ,EAGA1C,mBAAS,IAHT,mBAGpB2C,EAHoB,KAGZC,EAHY,KAW3B,OAPAC,qBAAU,WACNnC,IAAMC,IAAN,uCAHQ,qCAGR,eAAoD4B,IAC/C3B,MAAK,SAAAC,GACF+B,EAAS/B,EAAIC,KAAKC,KAAK,OAE1BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAChC,IAEE,yBAAKa,UAAU,WACX,yBAAKA,UAAU,OAAM,yBAAKM,IAAKO,EAAMG,cAAeC,IAAI,SACxD,yBAAKjB,UAAU,QACX,2CAAiBa,EAAMK,MACvB,uBAAGrB,OAAO,SAASsB,KAAMN,EAAMO,QAASC,UAAQ,GAAhD,sBCGDC,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKtB,UAAU,OACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CAAOA,KAAK,aAAaC,OAAQ,SAACxD,GAAD,OAAW,kBAAC,EAAD,SAAuB,kBAAC,EAAgBA,GAAxC,YCHpCyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdpD,OAAM,SAAAqD,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.f5f111d3.chunk.js","sourcesContent":["import React , {createContext , useState, useEffect} from 'react'\r\nimport axios from 'axios';\r\n\r\nexport const SearchContext = createContext();\r\nconst SearchCntextProvidor = (props) =>{\r\n    const [search , setSearch] = useState('');\r\n    const [Results , setResults] = useState([ ]);\r\n    const Api = '15904505-b2759c091eeb01ad30cae943e';\r\n    const SearchBtn = (e) => {\r\n        e.preventDefault();\r\n        axios.get(`https://pixabay.com/api/?key=${Api}&q=${search}&image_type=photo&per_page=12`)\r\n            .then(res => {\r\n                setResults(res.data.hits);\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n    }\r\n    return(\r\n        <SearchContext.Provider value={{setSearch , Results , SearchBtn}}>\r\n            {props.children}\r\n        </SearchContext.Provider>\r\n    )\r\n}\r\nexport default SearchCntextProvidor;","import React , {useContext} from 'react';\r\nimport { SearchContext } from '../Context-API/SearchContext';\r\nconst Search = () => {\r\n    const {setSearch ,SearchBtn} = useContext(SearchContext);\r\n    const setvalue = (e) => {\r\n        setSearch(e.target.value);\r\n    }\r\n    return(\r\n        <form onSubmit={SearchBtn}>\r\n            <input type=\"text\" placeholder='Saerch For Images' onChange={setvalue} required />\r\n            <button>Search</button>\r\n        </form>\r\n    )\r\n}\r\nexport default Search;","import React , {useContext} from 'react'\r\nimport Search from './Search';\r\nimport '../Styles/Home.css'\r\nimport { SearchContext } from '../Context-API/SearchContext';\r\nimport { Link } from 'react-router-dom';\r\nconst Home = () => {\r\n    const {Results} = useContext(SearchContext);\r\n    return(\r\n        <div className=\"Home\">\r\n            <Search />\r\n            <div className=\"Results\">\r\n                {Results.map(img => (\r\n                    <div className=\"img\" key={img.id}>\r\n                        <Link to={'/' + img.id}>\r\n                            <img src={img.webformatURL}/>\r\n                            <div className=\"overlay\"></div>\r\n                        </Link>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Home ;","import React,{useEffect , useState} from 'react';\r\nimport axios from 'axios'\r\nimport '../Styles/Details.css';\r\nconst ImgDetailes = (props) => {\r\n    let imgID = props.match.params.Image_id;\r\n    const Api = '15904505-b2759c091eeb01ad30cae943e';\r\n    const [Image , setImage] = useState([ ]);\r\n    useEffect(()=>{\r\n        axios.get(`https://pixabay.com/api/?key=${Api}&id=${imgID}`)\r\n            .then(res => {\r\n                setImage(res.data.hits[0]);\r\n            })\r\n            .catch(err => console.log(err)); \r\n    },[]);\r\n    return(\r\n        <div className=\"details\">\r\n            <div className=\"img\"><img src={Image.largeImageURL} alt=\"img\"/></div>\r\n            <div className=\"info\">\r\n                <h1>Uploaded By:{Image.user}</h1>\r\n                <a target='_blank' href={Image.pageURL} download>Go To Download</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ImgDetailes;","import React from 'react';\nimport SearchCntextProvidor from './Context-API/SearchContext';\nimport {BrowserRouter , Route , Switch} from 'react-router-dom'\nimport Home from './Components/Home';\nimport ImgDetailes from './Components/ImgDetails';\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n          <Switch>\n            <Route exact path='/'>\n              <SearchCntextProvidor>\n                <Home />\n              </SearchCntextProvidor>\n            </Route>\n            <Route path='/:Image_id' render={(props) => <SearchCntextProvidor> <ImgDetailes {...props} /> </SearchCntextProvidor>} />\n          </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}